# PIPELINE DEFINITION
# Name: disease-risk-pipeline
# Description: Crop disease risk prediction
# Inputs:
#    crop_name: str
#    humidity: float
#    soil_moisture: float
#    temperature: float
# Outputs:
#    Output: str
components:
  comp-data-preparation:
    executorLabel: exec-data-preparation
    inputDefinitions:
      parameters:
        data_path:
          parameterType: STRING
        storage_bucket:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-model-building-training:
    executorLabel: exec-model-building-training
    inputDefinitions:
      parameters:
        data_path:
          parameterType: STRING
        storage_bucket:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-predict:
    executorLabel: exec-predict
    inputDefinitions:
      parameters:
        crop_name:
          parameterType: STRING
        data_path:
          parameterType: STRING
        humidity:
          parameterType: NUMBER_DOUBLE
        soil_moisture:
          parameterType: NUMBER_DOUBLE
        storage_bucket:
          parameterType: STRING
        temperature:
          parameterType: NUMBER_DOUBLE
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-data-preparation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - data_preparation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.4.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'scikit-learn'\
          \ 'pandas' 'numpy' 'minio' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef data_preparation(storage_bucket: str, data_path: str) -> str:\n\
          \    from typing import NamedTuple\n    import pandas as pd\n    from sklearn.model_selection\
          \ import train_test_split\n    from sklearn.preprocessing import StandardScaler,\
          \ LabelEncoder\n    import joblib\n    import numpy as np\n    from minio\
          \ import Minio\n    from minio.error import S3Error\n\n    data_path = f\"\
          {data_path}/1\"\n\n    minio_client = Minio(\n        \"172.20.16.117:9000\"\
          ,\n        access_key=\"pTNMJ884sHchwenM2yOE\",\n        secret_key=\"Vp97YHJRnHjgiOt492rWIKjJgzC5An3RfZK0VJ10\"\
          ,\n        secure=False\n    )\n\n    # Create a synthetic dataset\n   \
          \ data = {\n        'crop_name': ['wheat', 'rice', 'maize', 'wheat', 'rice',\
          \ 'maize', \n                      'wheat', 'rice', 'maize', 'wheat', 'rice',\
          \ 'maize'],\n        'temperature': [20, 25, 22, 21, 24, 23, 19, 26, 21,\
          \ 20, 25, 22],\n        'humidity': [30, 50, 45, 32, 48, 47, 31, 52, 44,\
          \ 30, 50, 45],\n        'soil_moisture': [40, 60, 55, 42, 58, 57, 41, 62,\
          \ 54, 40, 60, 55],\n        'disease_risk': ['low', 'high', 'medium', 'low',\
          \ 'high', 'medium', \n                         'low', 'high', 'medium',\
          \ 'low', 'high', 'medium']\n    }\n\n    df = pd.DataFrame(data)\n\n   \
          \ # Encode categorical variable for crop_name\n    crop_label_encoder =\
          \ LabelEncoder()\n    df['crop_name'] = crop_label_encoder.fit_transform(df['crop_name'])\n\
          \n    # Encode target variable\n    risk_label_encoder = LabelEncoder()\n\
          \    df['disease_risk'] = risk_label_encoder.fit_transform(df['disease_risk'])\n\
          \n    # Features and target variable\n    X = df[['crop_name', 'temperature',\
          \ 'humidity', 'soil_moisture']]\n    y = df['disease_risk']\n\n    # Split\
          \ data\n    X_train, X_test, y_train, y_test = train_test_split(\n     \
          \   X, y, test_size=0.2, random_state=42\n    )\n\n    # Standardize features\n\
          \    scaler = StandardScaler()\n    X_train = scaler.fit_transform(X_train)\n\
          \    X_test = scaler.transform(X_test)\n\n    # Save label encoders and\
          \ training data\n    joblib.dump(crop_label_encoder, '/tmp/crop_label_encoder.pkl')\n\
          \    joblib.dump(risk_label_encoder, '/tmp/risk_label_encoder.pkl')\n  \
          \  joblib.dump(scaler, '/tmp/scaler.pkl')\n    np.save('/tmp/X_train.npy',\
          \ X_train)\n    np.save('/tmp/X_test.npy', X_test)\n    np.save('/tmp/y_train.npy',\
          \ y_train)\n    np.save('/tmp/y_test.npy', y_test)\n\n    # Files to upload\n\
          \    files = {\n        \"X_train.npy\": \"/tmp/X_train.npy\",\n       \
          \ \"X_test.npy\": \"/tmp/X_test.npy\",\n        \"y_train.npy\": \"/tmp/y_train.npy\"\
          ,\n        \"y_test.npy\": \"/tmp/y_test.npy\",\n        \"crop_label_encoder.pkl\"\
          : \"/tmp/crop_label_encoder.pkl\",\n        \"risk_label_encoder.pkl\":\
          \ \"/tmp/risk_label_encoder.pkl\",\n        \"scaler.pkl\": \"/tmp/scaler.pkl\"\
          \n    }\n\n    # Upload files to MinIO\n    try:\n        for artifact_name,\
          \ file_path in files.items():\n            minio_client.fput_object(storage_bucket,\
          \ f\"{data_path}/{artifact_name}\", file_path)\n            print(f\"{artifact_name}\
          \ object successfully uploaded.\")\n    except S3Error as err:\n       \
          \ print(f\"Error occurred: {err}\")\n\n    return data_path\n\n"
        image: python:3.8
    exec-model-building-training:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - model_building_training
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.4.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'scikit-learn'\
          \ 'pandas' 'numpy' 'minio' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef model_building_training(storage_bucket: str, data_path: str)\
          \ -> str:\n    import numpy as np\n    from sklearn.ensemble import RandomForestClassifier\n\
          \    import joblib\n    from minio import Minio\n\n    # Initialize Minio\
          \ client\n    minio_client = Minio(\n        \"172.20.16.117:9000\",\n \
          \       access_key=\"pTNMJ884sHchwenM2yOE\",\n        secret_key=\"Vp97YHJRnHjgiOt492rWIKjJgzC5An3RfZK0VJ10\"\
          ,\n        secure=False\n    )\n\n    # Load data from Minio\n    minio_client.fget_object(storage_bucket,\
          \ f\"{data_path}/X_train.npy\", \"/tmp/X_train.npy\")\n    X_train = np.load(\"\
          /tmp/X_train.npy\")\n\n    minio_client.fget_object(storage_bucket, f\"\
          {data_path}/y_train.npy\", \"/tmp/y_train.npy\")\n    y_train = np.load(\"\
          /tmp/y_train.npy\")\n\n    # Initialize the model\n    model = RandomForestClassifier(n_estimators=100,\
          \ random_state=42)\n\n    # Train the model\n    model.fit(X_train, y_train)\n\
          \n    # Save the model\n    model_path = '/tmp/model.pkl'\n    joblib.dump(model,\
          \ model_path)\n\n    # Upload the model to MinIO\n    minio_client.fput_object(storage_bucket,\
          \ f\"{data_path}/model.pkl\", model_path)\n\n    return data_path\n\n"
        image: python:3.8
    exec-predict:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.4.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'scikit-learn'\
          \ 'pandas' 'numpy' 'minio' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict(\n    crop_name: str, \n    temperature: float, \n  \
          \  humidity: float, \n    soil_moisture: float,\n    storage_bucket: str,\n\
          \    data_path: str\n) -> str:\n    import joblib\n    import numpy as np\n\
          \    from minio import Minio\n\n    # Initialize MinIO client\n    minio_client\
          \ = Minio(\n        \"172.20.16.117:9000\",\n        access_key=\"pTNMJ884sHchwenM2yOE\"\
          ,\n        secret_key=\"Vp97YHJRnHjgiOt492rWIKjJgzC5An3RfZK0VJ10\",\n  \
          \      secure=False\n    )\n\n    # Load data from Minio - model, scaler,\
          \ and encoders\n    minio_client.fget_object(storage_bucket, f\"{data_path}/scaler.pkl\"\
          , \"/tmp/scaler.pkl\")\n    scaler = joblib.load(\"/tmp/scaler.pkl\")\n\n\
          \    minio_client.fget_object(storage_bucket, f\"{data_path}/crop_label_encoder.pkl\"\
          , \"/tmp/crop_label_encoder.pkl\")\n    crop_label_encoder = joblib.load(\"\
          /tmp/crop_label_encoder.pkl\")\n\n    minio_client.fget_object(storage_bucket,\
          \ f\"{data_path}/risk_label_encoder.pkl\", \"/tmp/risk_label_encoder.pkl\"\
          )\n    risk_label_encoder = joblib.load(\"/tmp/risk_label_encoder.pkl\"\
          )\n\n    minio_client.fget_object(storage_bucket, f\"{data_path}/model.pkl\"\
          , \"/tmp/model.pkl\")\n    model = joblib.load(\"/tmp/model.pkl\")\n\n \
          \   # Encode the crop_name\n    crop_name_encoded = crop_label_encoder.transform([crop_name])[0]\n\
          \n    # Prepare the feature vector\n    features = np.array([[crop_name_encoded,\
          \ temperature, humidity, soil_moisture]])\n    features_scaled = scaler.transform(features)\n\
          \n    # Predict the disease risk\n    risk_encoded = model.predict(features_scaled)[0]\n\
          \n    # Decode the risk\n    risk = risk_label_encoder.inverse_transform([risk_encoded])[0]\n\
          \n    return f'The disease risk for {crop_name} is {risk}.'\n\n"
        image: python:3.8
pipelineInfo:
  description: Crop disease risk prediction
  name: disease-risk-pipeline
root:
  dag:
    outputs:
      parameters:
        Output:
          valueFromParameter:
            outputParameterKey: Output
            producerSubtask: predict
    tasks:
      data-preparation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-data-preparation
        inputs:
          parameters:
            data_path:
              runtimeValue:
                constant: disease-risk
            storage_bucket:
              runtimeValue:
                constant: kubeflow-pipelines
        taskInfo:
          name: data-preparation
      model-building-training:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-building-training
        dependentTasks:
        - data-preparation
        inputs:
          parameters:
            data_path:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: data-preparation
            storage_bucket:
              runtimeValue:
                constant: kubeflow-pipelines
        taskInfo:
          name: model-building-training
      predict:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-predict
        dependentTasks:
        - model-building-training
        inputs:
          parameters:
            crop_name:
              componentInputParameter: crop_name
            data_path:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: model-building-training
            humidity:
              componentInputParameter: humidity
            soil_moisture:
              componentInputParameter: soil_moisture
            storage_bucket:
              runtimeValue:
                constant: kubeflow-pipelines
            temperature:
              componentInputParameter: temperature
        taskInfo:
          name: predict
  inputDefinitions:
    parameters:
      crop_name:
        parameterType: STRING
      humidity:
        parameterType: NUMBER_DOUBLE
      soil_moisture:
        parameterType: NUMBER_DOUBLE
      temperature:
        parameterType: NUMBER_DOUBLE
  outputDefinitions:
    parameters:
      Output:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.4.0
